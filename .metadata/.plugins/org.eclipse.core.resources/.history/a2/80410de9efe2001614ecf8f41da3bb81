#include "Arduino.h"
#include <SPI.h>
#include <Ethernet.h>
#include "WebAccess.h"

const char  headerEndMarker[]  = "\r\n\r\n";
const size_t messageLength = 255;
char message[messageLength];

const char server[]  = "www.heydorn.biz";
const char  AjaxControllerPath[]  = "/PlugConnectorControl/AjaxController.php";
const char  GetChannelConfigParams[]  = "?action=GetConfig&old=";
bool isProcessingBody = false;
unsigned int index = 0;

PlugDataAccess::PlugDataAccess() :
		SDStorage()
{
	Success = false;
}

bool WebAccess::connect()
{
	Ethernet.maintain();
	index = 0;
	message[index] = '\0';

	if (client.connect(server, 80) == 1)
	{
		Success = true;
		return true;
	}
	else
	{
		Success = false;
		return false;
	}

}

void WebAccess::begin(uint8_t *mac_address)
{
	SDStorage::begin();
	delay(1000);
	Ethernet.begin(mac_address);
	delay(1000);
}

char* WebAccess::getChannelConfig(const char * data)
{
	if (connect())
	{
		char parameters[60] = "";
		strcat(parameters, GetChannelConfigParams);
		strcat(parameters, data);
		printRequest(parameters);
		waitForData();
		consumeHeader();
		while (client.connected() || client.available())
		{
			if (checkOverflow())
			{
				return message;
			}
			message[index++] = client.read();
			message[index] = '\0';
		}
		client.stop();

	}
	return message;
}

void WebAccess::printRequest(const char * parameters)
{
	client.print(F("GET "));
	client.print(AjaxControllerPath);
	client.print(parameters);
	client.println(F(" HTTP/1.1"));
	client.print(F("Host: "));
	client.println(server);
	client.println(F("Connection: close"));
	client.println();
}

void WebAccess::waitForData()
{
	while (client.connected() && !client.available())
		delay(1); //waits for data
	isProcessingBody = false;
}

bool WebAccess::checkOverflow()
{
	if (index >= messageLength - 1)
	{
		Success = false;
		message[index] = '\0';
		client.stop();
		return true;
	}
	return false;
}

void WebAccess::consumeHeader()
{
	while (client.connected() || client.available())
	{
		if (checkOverflow())
		{
			return;
		}
		message[index++] = (char) client.read();
		message[index] = '\0';
		if (!isProcessingBody && strstr(message, headerEndMarker))
		{
			index = 0;
			isProcessingBody = true;
		}

	}
}
